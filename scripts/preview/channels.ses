(~ image[] orig -> image[]) {
    for (int i = 0; i < #|orig; i++)
        orig[i] = sep_channels(orig[i]);
    
    return orig;
}

sep_channels(~ image orig -> image) {
    ~ int w = orig.w; ~ int h = orig.h;
    ~ bool vert = w > h;

    ~ int CHANNELS = 3;

    ~ image separated = vert ? blank(w, h * CHANNELS) : blank(w * CHANNELS, h);
    ~ {int : (color -> color)} indexMap = {
        0 : ::red, 1 : ::green, 2 : ::blue
    };

    for (int i = 0; i < CHANNELS; i++) {
        ~ image c_img = blank(w, h);
        ~ (color -> color) f = indexMap.lookup(i);

        for (int x = 0; x < w; x++)
            for (int y = 0; y < h; y++) {
                ~ color c = orig.pixel(x, y);
                c_img.dot(f.call(c), x, y);
            }
        
        separated.draw(c_img, vert ? 0 : i * w, vert ? i * h : 0);
    }

    return separated;
}

red(~ color c -> color) -> rgba(c.r, 0, 0, c.a)
green(~ color c -> color) -> rgba(0, c.g, 0, c.a)
blue(~ color c -> color) -> rgba(0, 0, c.b, c.a)
